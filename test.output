Terminals unused in grammar

   ERROR


Grammar

    0 $accept: program $end

    1 program: stmt_seq

    2 stmt_seq: stmt_seq SEMI stmt
    3         | stmt

    4 stmt: if_stmt
    5     | repeat_stmt
    6     | assign_stmt
    7     | read_stmt
    8     | write_stmt
    9     | error

   10 if_stmt: IF exp THEN stmt_seq END
   11        | IF exp THEN stmt_seq ELSE stmt_seq END

   12 repeat_stmt: REPEAT stmt_seq UNTIL exp

   13 $@1: %empty

   14 assign_stmt: ID $@1 ASSIGN exp

   15 read_stmt: READ ID

   16 write_stmt: WRITE exp

   17 exp: simple_exp LT simple_exp
   18    | simple_exp EQ simple_exp
   19    | simple_exp

   20 simple_exp: simple_exp PLUS term
   21           | simple_exp MINUS term
   22           | term

   23 term: term TIMES factor
   24     | term OVER factor
   25     | factor

   26 factor: LPAREN exp RPAREN
   27       | NUM
   28       | ID
   29       | error


Terminals, with rules where they appear

$end (0) 0
error (256) 9 29
IF (258) 10 11
THEN (259) 10 11
ELSE (260) 11
END (261) 10 11
REPEAT (262) 12
UNTIL (263) 12
READ (264) 15
WRITE (265) 16
ID (266) 14 15 28
NUM (267) 27
ASSIGN (268) 14
EQ (269) 18
LT (270) 17
PLUS (271) 20
MINUS (272) 21
TIMES (273) 23
OVER (274) 24
LPAREN (275) 26
RPAREN (276) 26
SEMI (277) 2
ERROR (278)


Nonterminals, with rules where they appear

$accept (24)
    on left: 0
program (25)
    on left: 1, on right: 0
stmt_seq (26)
    on left: 2 3, on right: 1 2 10 11 12
stmt (27)
    on left: 4 5 6 7 8 9, on right: 2 3
if_stmt (28)
    on left: 10 11, on right: 4
repeat_stmt (29)
    on left: 12, on right: 5
assign_stmt (30)
    on left: 14, on right: 6
$@1 (31)
    on left: 13, on right: 14
read_stmt (32)
    on left: 15, on right: 7
write_stmt (33)
    on left: 16, on right: 8
exp (34)
    on left: 17 18 19, on right: 10 11 12 14 16 26
simple_exp (35)
    on left: 20 21 22, on right: 17 18 19 20 21
term (36)
    on left: 23 24 25, on right: 20 21 22 23 24
factor (37)
    on left: 26 27 28 29, on right: 23 24 25


State 0

    0 $accept: . program $end
    1 program: . stmt_seq
    2 stmt_seq: . stmt_seq SEMI stmt
    3         | . stmt
    4 stmt: . if_stmt
    5     | . repeat_stmt
    6     | . assign_stmt
    7     | . read_stmt
    8     | . write_stmt
    9     | . error
   10 if_stmt: . IF exp THEN stmt_seq END
   11        | . IF exp THEN stmt_seq ELSE stmt_seq END
   12 repeat_stmt: . REPEAT stmt_seq UNTIL exp
   14 assign_stmt: . ID $@1 ASSIGN exp
   15 read_stmt: . READ ID
   16 write_stmt: . WRITE exp

    error   shift, and go to state 1
    IF      shift, and go to state 2
    REPEAT  shift, and go to state 3
    READ    shift, and go to state 4
    WRITE   shift, and go to state 5
    ID      shift, and go to state 6

    program      go to state 7
    stmt_seq     go to state 8
    stmt         go to state 9
    if_stmt      go to state 10
    repeat_stmt  go to state 11
    assign_stmt  go to state 12
    read_stmt    go to state 13
    write_stmt   go to state 14


State 1

    9 stmt: error .

    $default  reduce using rule 9 (stmt)


State 2

   10 if_stmt: IF . exp THEN stmt_seq END
   11        | IF . exp THEN stmt_seq ELSE stmt_seq END
   17 exp: . simple_exp LT simple_exp
   18    | . simple_exp EQ simple_exp
   19    | . simple_exp
   20 simple_exp: . simple_exp PLUS term
   21           | . simple_exp MINUS term
   22           | . term
   23 term: . term TIMES factor
   24     | . term OVER factor
   25     | . factor
   26 factor: . LPAREN exp RPAREN
   27       | . NUM
   28       | . ID
   29       | . error

    error   shift, and go to state 15
    ID      shift, and go to state 16
    NUM     shift, and go to state 17
    LPAREN  shift, and go to state 18

    exp         go to state 19
    simple_exp  go to state 20
    term        go to state 21
    factor      go to state 22


State 3

    2 stmt_seq: . stmt_seq SEMI stmt
    3         | . stmt
    4 stmt: . if_stmt
    5     | . repeat_stmt
    6     | . assign_stmt
    7     | . read_stmt
    8     | . write_stmt
    9     | . error
   10 if_stmt: . IF exp THEN stmt_seq END
   11        | . IF exp THEN stmt_seq ELSE stmt_seq END
   12 repeat_stmt: . REPEAT stmt_seq UNTIL exp
   12            | REPEAT . stmt_seq UNTIL exp
   14 assign_stmt: . ID $@1 ASSIGN exp
   15 read_stmt: . READ ID
   16 write_stmt: . WRITE exp

    error   shift, and go to state 1
    IF      shift, and go to state 2
    REPEAT  shift, and go to state 3
    READ    shift, and go to state 4
    WRITE   shift, and go to state 5
    ID      shift, and go to state 6

    stmt_seq     go to state 23
    stmt         go to state 9
    if_stmt      go to state 10
    repeat_stmt  go to state 11
    assign_stmt  go to state 12
    read_stmt    go to state 13
    write_stmt   go to state 14


State 4

   15 read_stmt: READ . ID

    ID  shift, and go to state 24


State 5

   16 write_stmt: WRITE . exp
   17 exp: . simple_exp LT simple_exp
   18    | . simple_exp EQ simple_exp
   19    | . simple_exp
   20 simple_exp: . simple_exp PLUS term
   21           | . simple_exp MINUS term
   22           | . term
   23 term: . term TIMES factor
   24     | . term OVER factor
   25     | . factor
   26 factor: . LPAREN exp RPAREN
   27       | . NUM
   28       | . ID
   29       | . error

    error   shift, and go to state 15
    ID      shift, and go to state 16
    NUM     shift, and go to state 17
    LPAREN  shift, and go to state 18

    exp         go to state 25
    simple_exp  go to state 20
    term        go to state 21
    factor      go to state 22


State 6

   13 $@1: . %empty
   14 assign_stmt: ID . $@1 ASSIGN exp

    $default  reduce using rule 13 ($@1)

    $@1  go to state 26


State 7

    0 $accept: program . $end

    $end  shift, and go to state 27


State 8

    1 program: stmt_seq .  [$end]
    2 stmt_seq: stmt_seq . SEMI stmt

    SEMI  shift, and go to state 28

    $default  reduce using rule 1 (program)


State 9

    3 stmt_seq: stmt .

    $default  reduce using rule 3 (stmt_seq)


State 10

    4 stmt: if_stmt .

    $default  reduce using rule 4 (stmt)


State 11

    5 stmt: repeat_stmt .

    $default  reduce using rule 5 (stmt)


State 12

    6 stmt: assign_stmt .

    $default  reduce using rule 6 (stmt)


State 13

    7 stmt: read_stmt .

    $default  reduce using rule 7 (stmt)


State 14

    8 stmt: write_stmt .

    $default  reduce using rule 8 (stmt)


State 15

   29 factor: error .

    $default  reduce using rule 29 (factor)


State 16

   28 factor: ID .

    $default  reduce using rule 28 (factor)


State 17

   27 factor: NUM .

    $default  reduce using rule 27 (factor)


State 18

   17 exp: . simple_exp LT simple_exp
   18    | . simple_exp EQ simple_exp
   19    | . simple_exp
   20 simple_exp: . simple_exp PLUS term
   21           | . simple_exp MINUS term
   22           | . term
   23 term: . term TIMES factor
   24     | . term OVER factor
   25     | . factor
   26 factor: . LPAREN exp RPAREN
   26       | LPAREN . exp RPAREN
   27       | . NUM
   28       | . ID
   29       | . error

    error   shift, and go to state 15
    ID      shift, and go to state 16
    NUM     shift, and go to state 17
    LPAREN  shift, and go to state 18

    exp         go to state 29
    simple_exp  go to state 20
    term        go to state 21
    factor      go to state 22


State 19

   10 if_stmt: IF exp . THEN stmt_seq END
   11        | IF exp . THEN stmt_seq ELSE stmt_seq END

    THEN  shift, and go to state 30


State 20

   17 exp: simple_exp . LT simple_exp
   18    | simple_exp . EQ simple_exp
   19    | simple_exp .  [$end, THEN, ELSE, END, UNTIL, RPAREN, SEMI]
   20 simple_exp: simple_exp . PLUS term
   21           | simple_exp . MINUS term

    EQ     shift, and go to state 31
    LT     shift, and go to state 32
    PLUS   shift, and go to state 33
    MINUS  shift, and go to state 34

    $default  reduce using rule 19 (exp)


State 21

   22 simple_exp: term .  [$end, THEN, ELSE, END, UNTIL, EQ, LT, PLUS, MINUS, RPAREN, SEMI]
   23 term: term . TIMES factor
   24     | term . OVER factor

    TIMES  shift, and go to state 35
    OVER   shift, and go to state 36

    $default  reduce using rule 22 (simple_exp)


State 22

   25 term: factor .

    $default  reduce using rule 25 (term)


State 23

    2 stmt_seq: stmt_seq . SEMI stmt
   12 repeat_stmt: REPEAT stmt_seq . UNTIL exp

    UNTIL  shift, and go to state 37
    SEMI   shift, and go to state 28


State 24

   15 read_stmt: READ ID .

    $default  reduce using rule 15 (read_stmt)


State 25

   16 write_stmt: WRITE exp .

    $default  reduce using rule 16 (write_stmt)


State 26

   14 assign_stmt: ID $@1 . ASSIGN exp

    ASSIGN  shift, and go to state 38


State 27

    0 $accept: program $end .

    $default  accept


State 28

    2 stmt_seq: stmt_seq SEMI . stmt
    4 stmt: . if_stmt
    5     | . repeat_stmt
    6     | . assign_stmt
    7     | . read_stmt
    8     | . write_stmt
    9     | . error
   10 if_stmt: . IF exp THEN stmt_seq END
   11        | . IF exp THEN stmt_seq ELSE stmt_seq END
   12 repeat_stmt: . REPEAT stmt_seq UNTIL exp
   14 assign_stmt: . ID $@1 ASSIGN exp
   15 read_stmt: . READ ID
   16 write_stmt: . WRITE exp

    error   shift, and go to state 1
    IF      shift, and go to state 2
    REPEAT  shift, and go to state 3
    READ    shift, and go to state 4
    WRITE   shift, and go to state 5
    ID      shift, and go to state 6

    stmt         go to state 39
    if_stmt      go to state 10
    repeat_stmt  go to state 11
    assign_stmt  go to state 12
    read_stmt    go to state 13
    write_stmt   go to state 14


State 29

   26 factor: LPAREN exp . RPAREN

    RPAREN  shift, and go to state 40


State 30

    2 stmt_seq: . stmt_seq SEMI stmt
    3         | . stmt
    4 stmt: . if_stmt
    5     | . repeat_stmt
    6     | . assign_stmt
    7     | . read_stmt
    8     | . write_stmt
    9     | . error
   10 if_stmt: . IF exp THEN stmt_seq END
   10        | IF exp THEN . stmt_seq END
   11        | . IF exp THEN stmt_seq ELSE stmt_seq END
   11        | IF exp THEN . stmt_seq ELSE stmt_seq END
   12 repeat_stmt: . REPEAT stmt_seq UNTIL exp
   14 assign_stmt: . ID $@1 ASSIGN exp
   15 read_stmt: . READ ID
   16 write_stmt: . WRITE exp

    error   shift, and go to state 1
    IF      shift, and go to state 2
    REPEAT  shift, and go to state 3
    READ    shift, and go to state 4
    WRITE   shift, and go to state 5
    ID      shift, and go to state 6

    stmt_seq     go to state 41
    stmt         go to state 9
    if_stmt      go to state 10
    repeat_stmt  go to state 11
    assign_stmt  go to state 12
    read_stmt    go to state 13
    write_stmt   go to state 14


State 31

   18 exp: simple_exp EQ . simple_exp
   20 simple_exp: . simple_exp PLUS term
   21           | . simple_exp MINUS term
   22           | . term
   23 term: . term TIMES factor
   24     | . term OVER factor
   25     | . factor
   26 factor: . LPAREN exp RPAREN
   27       | . NUM
   28       | . ID
   29       | . error

    error   shift, and go to state 15
    ID      shift, and go to state 16
    NUM     shift, and go to state 17
    LPAREN  shift, and go to state 18

    simple_exp  go to state 42
    term        go to state 21
    factor      go to state 22


State 32

   17 exp: simple_exp LT . simple_exp
   20 simple_exp: . simple_exp PLUS term
   21           | . simple_exp MINUS term
   22           | . term
   23 term: . term TIMES factor
   24     | . term OVER factor
   25     | . factor
   26 factor: . LPAREN exp RPAREN
   27       | . NUM
   28       | . ID
   29       | . error

    error   shift, and go to state 15
    ID      shift, and go to state 16
    NUM     shift, and go to state 17
    LPAREN  shift, and go to state 18

    simple_exp  go to state 43
    term        go to state 21
    factor      go to state 22


State 33

   20 simple_exp: simple_exp PLUS . term
   23 term: . term TIMES factor
   24     | . term OVER factor
   25     | . factor
   26 factor: . LPAREN exp RPAREN
   27       | . NUM
   28       | . ID
   29       | . error

    error   shift, and go to state 15
    ID      shift, and go to state 16
    NUM     shift, and go to state 17
    LPAREN  shift, and go to state 18

    term    go to state 44
    factor  go to state 22


State 34

   21 simple_exp: simple_exp MINUS . term
   23 term: . term TIMES factor
   24     | . term OVER factor
   25     | . factor
   26 factor: . LPAREN exp RPAREN
   27       | . NUM
   28       | . ID
   29       | . error

    error   shift, and go to state 15
    ID      shift, and go to state 16
    NUM     shift, and go to state 17
    LPAREN  shift, and go to state 18

    term    go to state 45
    factor  go to state 22


State 35

   23 term: term TIMES . factor
   26 factor: . LPAREN exp RPAREN
   27       | . NUM
   28       | . ID
   29       | . error

    error   shift, and go to state 15
    ID      shift, and go to state 16
    NUM     shift, and go to state 17
    LPAREN  shift, and go to state 18

    factor  go to state 46


State 36

   24 term: term OVER . factor
   26 factor: . LPAREN exp RPAREN
   27       | . NUM
   28       | . ID
   29       | . error

    error   shift, and go to state 15
    ID      shift, and go to state 16
    NUM     shift, and go to state 17
    LPAREN  shift, and go to state 18

    factor  go to state 47


State 37

   12 repeat_stmt: REPEAT stmt_seq UNTIL . exp
   17 exp: . simple_exp LT simple_exp
   18    | . simple_exp EQ simple_exp
   19    | . simple_exp
   20 simple_exp: . simple_exp PLUS term
   21           | . simple_exp MINUS term
   22           | . term
   23 term: . term TIMES factor
   24     | . term OVER factor
   25     | . factor
   26 factor: . LPAREN exp RPAREN
   27       | . NUM
   28       | . ID
   29       | . error

    error   shift, and go to state 15
    ID      shift, and go to state 16
    NUM     shift, and go to state 17
    LPAREN  shift, and go to state 18

    exp         go to state 48
    simple_exp  go to state 20
    term        go to state 21
    factor      go to state 22


State 38

   14 assign_stmt: ID $@1 ASSIGN . exp
   17 exp: . simple_exp LT simple_exp
   18    | . simple_exp EQ simple_exp
   19    | . simple_exp
   20 simple_exp: . simple_exp PLUS term
   21           | . simple_exp MINUS term
   22           | . term
   23 term: . term TIMES factor
   24     | . term OVER factor
   25     | . factor
   26 factor: . LPAREN exp RPAREN
   27       | . NUM
   28       | . ID
   29       | . error

    error   shift, and go to state 15
    ID      shift, and go to state 16
    NUM     shift, and go to state 17
    LPAREN  shift, and go to state 18

    exp         go to state 49
    simple_exp  go to state 20
    term        go to state 21
    factor      go to state 22


State 39

    2 stmt_seq: stmt_seq SEMI stmt .

    $default  reduce using rule 2 (stmt_seq)


State 40

   26 factor: LPAREN exp RPAREN .

    $default  reduce using rule 26 (factor)


State 41

    2 stmt_seq: stmt_seq . SEMI stmt
   10 if_stmt: IF exp THEN stmt_seq . END
   11        | IF exp THEN stmt_seq . ELSE stmt_seq END

    ELSE  shift, and go to state 50
    END   shift, and go to state 51
    SEMI  shift, and go to state 28


State 42

   18 exp: simple_exp EQ simple_exp .  [$end, THEN, ELSE, END, UNTIL, RPAREN, SEMI]
   20 simple_exp: simple_exp . PLUS term
   21           | simple_exp . MINUS term

    PLUS   shift, and go to state 33
    MINUS  shift, and go to state 34

    $default  reduce using rule 18 (exp)


State 43

   17 exp: simple_exp LT simple_exp .  [$end, THEN, ELSE, END, UNTIL, RPAREN, SEMI]
   20 simple_exp: simple_exp . PLUS term
   21           | simple_exp . MINUS term

    PLUS   shift, and go to state 33
    MINUS  shift, and go to state 34

    $default  reduce using rule 17 (exp)


State 44

   20 simple_exp: simple_exp PLUS term .  [$end, THEN, ELSE, END, UNTIL, EQ, LT, PLUS, MINUS, RPAREN, SEMI]
   23 term: term . TIMES factor
   24     | term . OVER factor

    TIMES  shift, and go to state 35
    OVER   shift, and go to state 36

    $default  reduce using rule 20 (simple_exp)


State 45

   21 simple_exp: simple_exp MINUS term .  [$end, THEN, ELSE, END, UNTIL, EQ, LT, PLUS, MINUS, RPAREN, SEMI]
   23 term: term . TIMES factor
   24     | term . OVER factor

    TIMES  shift, and go to state 35
    OVER   shift, and go to state 36

    $default  reduce using rule 21 (simple_exp)


State 46

   23 term: term TIMES factor .

    $default  reduce using rule 23 (term)


State 47

   24 term: term OVER factor .

    $default  reduce using rule 24 (term)


State 48

   12 repeat_stmt: REPEAT stmt_seq UNTIL exp .

    $default  reduce using rule 12 (repeat_stmt)


State 49

   14 assign_stmt: ID $@1 ASSIGN exp .

    $default  reduce using rule 14 (assign_stmt)


State 50

    2 stmt_seq: . stmt_seq SEMI stmt
    3         | . stmt
    4 stmt: . if_stmt
    5     | . repeat_stmt
    6     | . assign_stmt
    7     | . read_stmt
    8     | . write_stmt
    9     | . error
   10 if_stmt: . IF exp THEN stmt_seq END
   11        | . IF exp THEN stmt_seq ELSE stmt_seq END
   11        | IF exp THEN stmt_seq ELSE . stmt_seq END
   12 repeat_stmt: . REPEAT stmt_seq UNTIL exp
   14 assign_stmt: . ID $@1 ASSIGN exp
   15 read_stmt: . READ ID
   16 write_stmt: . WRITE exp

    error   shift, and go to state 1
    IF      shift, and go to state 2
    REPEAT  shift, and go to state 3
    READ    shift, and go to state 4
    WRITE   shift, and go to state 5
    ID      shift, and go to state 6

    stmt_seq     go to state 52
    stmt         go to state 9
    if_stmt      go to state 10
    repeat_stmt  go to state 11
    assign_stmt  go to state 12
    read_stmt    go to state 13
    write_stmt   go to state 14


State 51

   10 if_stmt: IF exp THEN stmt_seq END .

    $default  reduce using rule 10 (if_stmt)


State 52

    2 stmt_seq: stmt_seq . SEMI stmt
   11 if_stmt: IF exp THEN stmt_seq ELSE stmt_seq . END

    END   shift, and go to state 53
    SEMI  shift, and go to state 28


State 53

   11 if_stmt: IF exp THEN stmt_seq ELSE stmt_seq END .

    $default  reduce using rule 11 (if_stmt)
