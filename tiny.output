Terminals unused in grammar

   INT
   RETURN
   VOID
   WHILE
   ID_ERROR
   COMMENT_ERROR
   LTE
   GT
   GTE
   NEQ
   COMMA
   LCURL
   RCURL
   LBRACKET
   RBRACKET
   ERROR


State 33 conflicts: 2 shift/reduce
State 41 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: stmt_seq

    2 stmt_seq: stmt_seq SEMI stmt
    3         | stmt

    4 stmt: if_stmt
    5     | assign_stmt
    6     | error

    7 if_stmt: IF LPAREN exp RPAREN stmt_seq
    8        | IF LPAREN exp RPAREN stmt_seq ELSE stmt_seq

    9 $@1: %empty

   10 assign_stmt: ID $@1 ASSIGN exp

   11 exp: simple_exp LT simple_exp
   12    | simple_exp EQ simple_exp
   13    | simple_exp

   14 simple_exp: simple_exp PLUS term
   15           | simple_exp MINUS term
   16           | term

   17 term: term TIMES factor
   18     | term DIV factor
   19     | factor

   20 factor: LPAREN exp RPAREN
   21       | NUM
   22       | ID
   23       | error


Terminals, with rules where they appear

$end (0) 0
error (256) 6 23
IF (258) 7 8
ELSE (259) 8
INT (260)
RETURN (261)
VOID (262)
WHILE (263)
ID (264) 10 22
NUM (265) 21
ID_ERROR (266)
COMMENT_ERROR (267)
PLUS (268) 14
MINUS (269) 15
TIMES (270) 17
DIV (271) 18
LT (272) 11
LTE (273)
GT (274)
GTE (275)
EQ (276) 12
NEQ (277)
ASSIGN (278) 10
SEMI (279) 2
COMMA (280)
LPAREN (281) 7 8 20
RPAREN (282) 7 8 20
LCURL (283)
RCURL (284)
LBRACKET (285)
RBRACKET (286)
ERROR (287)


Nonterminals, with rules where they appear

$accept (33)
    on left: 0
program (34)
    on left: 1, on right: 0
stmt_seq (35)
    on left: 2 3, on right: 1 2 7 8
stmt (36)
    on left: 4 5 6, on right: 2 3
if_stmt (37)
    on left: 7 8, on right: 4
assign_stmt (38)
    on left: 10, on right: 5
$@1 (39)
    on left: 9, on right: 10
exp (40)
    on left: 11 12 13, on right: 7 8 10 20
simple_exp (41)
    on left: 14 15 16, on right: 11 12 13 14 15
term (42)
    on left: 17 18 19, on right: 14 15 16 17 18
factor (43)
    on left: 20 21 22 23, on right: 17 18 19


State 0

    0 $accept: . program $end

    error  shift, and go to state 1
    IF     shift, and go to state 2
    ID     shift, and go to state 3

    program      go to state 4
    stmt_seq     go to state 5
    stmt         go to state 6
    if_stmt      go to state 7
    assign_stmt  go to state 8


State 1

    6 stmt: error .

    $default  reduce using rule 6 (stmt)


State 2

    7 if_stmt: IF . LPAREN exp RPAREN stmt_seq
    8        | IF . LPAREN exp RPAREN stmt_seq ELSE stmt_seq

    LPAREN  shift, and go to state 9


State 3

   10 assign_stmt: ID . $@1 ASSIGN exp

    $default  reduce using rule 9 ($@1)

    $@1  go to state 10


State 4

    0 $accept: program . $end

    $end  shift, and go to state 11


State 5

    1 program: stmt_seq .
    2 stmt_seq: stmt_seq . SEMI stmt

    SEMI  shift, and go to state 12

    $default  reduce using rule 1 (program)


State 6

    3 stmt_seq: stmt .

    $default  reduce using rule 3 (stmt_seq)


State 7

    4 stmt: if_stmt .

    $default  reduce using rule 4 (stmt)


State 8

    5 stmt: assign_stmt .

    $default  reduce using rule 5 (stmt)


State 9

    7 if_stmt: IF LPAREN . exp RPAREN stmt_seq
    8        | IF LPAREN . exp RPAREN stmt_seq ELSE stmt_seq

    error   shift, and go to state 13
    ID      shift, and go to state 14
    NUM     shift, and go to state 15
    LPAREN  shift, and go to state 16

    exp         go to state 17
    simple_exp  go to state 18
    term        go to state 19
    factor      go to state 20


State 10

   10 assign_stmt: ID $@1 . ASSIGN exp

    ASSIGN  shift, and go to state 21


State 11

    0 $accept: program $end .

    $default  accept


State 12

    2 stmt_seq: stmt_seq SEMI . stmt

    error  shift, and go to state 1
    IF     shift, and go to state 2
    ID     shift, and go to state 3

    stmt         go to state 22
    if_stmt      go to state 7
    assign_stmt  go to state 8


State 13

   23 factor: error .

    $default  reduce using rule 23 (factor)


State 14

   22 factor: ID .

    $default  reduce using rule 22 (factor)


State 15

   21 factor: NUM .

    $default  reduce using rule 21 (factor)


State 16

   20 factor: LPAREN . exp RPAREN

    error   shift, and go to state 13
    ID      shift, and go to state 14
    NUM     shift, and go to state 15
    LPAREN  shift, and go to state 16

    exp         go to state 23
    simple_exp  go to state 18
    term        go to state 19
    factor      go to state 20


State 17

    7 if_stmt: IF LPAREN exp . RPAREN stmt_seq
    8        | IF LPAREN exp . RPAREN stmt_seq ELSE stmt_seq

    RPAREN  shift, and go to state 24


State 18

   11 exp: simple_exp . LT simple_exp
   12    | simple_exp . EQ simple_exp
   13    | simple_exp .
   14 simple_exp: simple_exp . PLUS term
   15           | simple_exp . MINUS term

    PLUS   shift, and go to state 25
    MINUS  shift, and go to state 26
    LT     shift, and go to state 27
    EQ     shift, and go to state 28

    $default  reduce using rule 13 (exp)


State 19

   16 simple_exp: term .
   17 term: term . TIMES factor
   18     | term . DIV factor

    TIMES  shift, and go to state 29
    DIV    shift, and go to state 30

    $default  reduce using rule 16 (simple_exp)


State 20

   19 term: factor .

    $default  reduce using rule 19 (term)


State 21

   10 assign_stmt: ID $@1 ASSIGN . exp

    error   shift, and go to state 13
    ID      shift, and go to state 14
    NUM     shift, and go to state 15
    LPAREN  shift, and go to state 16

    exp         go to state 31
    simple_exp  go to state 18
    term        go to state 19
    factor      go to state 20


State 22

    2 stmt_seq: stmt_seq SEMI stmt .

    $default  reduce using rule 2 (stmt_seq)


State 23

   20 factor: LPAREN exp . RPAREN

    RPAREN  shift, and go to state 32


State 24

    7 if_stmt: IF LPAREN exp RPAREN . stmt_seq
    8        | IF LPAREN exp RPAREN . stmt_seq ELSE stmt_seq

    error  shift, and go to state 1
    IF     shift, and go to state 2
    ID     shift, and go to state 3

    stmt_seq     go to state 33
    stmt         go to state 6
    if_stmt      go to state 7
    assign_stmt  go to state 8


State 25

   14 simple_exp: simple_exp PLUS . term

    error   shift, and go to state 13
    ID      shift, and go to state 14
    NUM     shift, and go to state 15
    LPAREN  shift, and go to state 16

    term    go to state 34
    factor  go to state 20


State 26

   15 simple_exp: simple_exp MINUS . term

    error   shift, and go to state 13
    ID      shift, and go to state 14
    NUM     shift, and go to state 15
    LPAREN  shift, and go to state 16

    term    go to state 35
    factor  go to state 20


State 27

   11 exp: simple_exp LT . simple_exp

    error   shift, and go to state 13
    ID      shift, and go to state 14
    NUM     shift, and go to state 15
    LPAREN  shift, and go to state 16

    simple_exp  go to state 36
    term        go to state 19
    factor      go to state 20


State 28

   12 exp: simple_exp EQ . simple_exp

    error   shift, and go to state 13
    ID      shift, and go to state 14
    NUM     shift, and go to state 15
    LPAREN  shift, and go to state 16

    simple_exp  go to state 37
    term        go to state 19
    factor      go to state 20


State 29

   17 term: term TIMES . factor

    error   shift, and go to state 13
    ID      shift, and go to state 14
    NUM     shift, and go to state 15
    LPAREN  shift, and go to state 16

    factor  go to state 38


State 30

   18 term: term DIV . factor

    error   shift, and go to state 13
    ID      shift, and go to state 14
    NUM     shift, and go to state 15
    LPAREN  shift, and go to state 16

    factor  go to state 39


State 31

   10 assign_stmt: ID $@1 ASSIGN exp .

    $default  reduce using rule 10 (assign_stmt)


State 32

   20 factor: LPAREN exp RPAREN .

    $default  reduce using rule 20 (factor)


State 33

    2 stmt_seq: stmt_seq . SEMI stmt
    7 if_stmt: IF LPAREN exp RPAREN stmt_seq .
    8        | IF LPAREN exp RPAREN stmt_seq . ELSE stmt_seq

    ELSE  shift, and go to state 40
    SEMI  shift, and go to state 12

    ELSE      [reduce using rule 7 (if_stmt)]
    SEMI      [reduce using rule 7 (if_stmt)]
    $default  reduce using rule 7 (if_stmt)


State 34

   14 simple_exp: simple_exp PLUS term .
   17 term: term . TIMES factor
   18     | term . DIV factor

    TIMES  shift, and go to state 29
    DIV    shift, and go to state 30

    $default  reduce using rule 14 (simple_exp)


State 35

   15 simple_exp: simple_exp MINUS term .
   17 term: term . TIMES factor
   18     | term . DIV factor

    TIMES  shift, and go to state 29
    DIV    shift, and go to state 30

    $default  reduce using rule 15 (simple_exp)


State 36

   11 exp: simple_exp LT simple_exp .
   14 simple_exp: simple_exp . PLUS term
   15           | simple_exp . MINUS term

    PLUS   shift, and go to state 25
    MINUS  shift, and go to state 26

    $default  reduce using rule 11 (exp)


State 37

   12 exp: simple_exp EQ simple_exp .
   14 simple_exp: simple_exp . PLUS term
   15           | simple_exp . MINUS term

    PLUS   shift, and go to state 25
    MINUS  shift, and go to state 26

    $default  reduce using rule 12 (exp)


State 38

   17 term: term TIMES factor .

    $default  reduce using rule 17 (term)


State 39

   18 term: term DIV factor .

    $default  reduce using rule 18 (term)


State 40

    8 if_stmt: IF LPAREN exp RPAREN stmt_seq ELSE . stmt_seq

    error  shift, and go to state 1
    IF     shift, and go to state 2
    ID     shift, and go to state 3

    stmt_seq     go to state 41
    stmt         go to state 6
    if_stmt      go to state 7
    assign_stmt  go to state 8


State 41

    2 stmt_seq: stmt_seq . SEMI stmt
    8 if_stmt: IF LPAREN exp RPAREN stmt_seq ELSE stmt_seq .

    SEMI  shift, and go to state 12

    SEMI      [reduce using rule 8 (if_stmt)]
    $default  reduce using rule 8 (if_stmt)
